package main

import (
	"fmt"
	"math/big"
)

/*
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。
——————————————————————————————————————————————
设f[i]最少被划分成几个完全平方数之和,第n个数等于，最小的（n-j^2 个数的最小平方和） + 1。然后划分为子问题。
状态转移方程：f[i] = min(1 <= j*j <= i){f[i-j^2] + 1}
*/
func main() {
	n := 3
	var f = make([]int, n+1)
	f[0] = 0
	for i := 1; i <= n; i++ {
		f[i] = big.MaxExp
		//寻找最小的f[i],遍历 j^2
		for j := 1; j*j <= i; j++ {
			if f[i-j*j]+1 < f[i] {
				f[i] = f[i-j*j] + 1
			}
		}
	}
	fmt.Println(f[n])
}
